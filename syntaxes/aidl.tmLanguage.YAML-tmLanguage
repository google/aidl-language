# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$schema: 'https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json'
fileTypes:
  - aidl
scopeName: source.aidl
name: AIDL
foldingStartMarker: '\{\s*$'
foldingStopMarker: '^\s*\}'
patterns:
  - include: '#main'
repository:
  main:
    patterns:
      - include: '#comments'
      - include: '#package'
      - include: '#import'
      - include: '#decls'
      - match: '([^\s])'
        name: invalid.illegal.aidl
  annotation:
    patterns:
      # Annotation with parameters
      - name: storage.type.annotation.aidl
        begin: (@)([_a-zA-Z][_a-zA-Z0-9]*)\s*(\()
        beginCaptures:
          '1': {name: punctuation.definition.annotation.aidl}
          '2': {name: meta.annotation.identifier.aidl}
          '3': {name: punctuation.definition.parameters.begin.aidl}
        end: (\))
        endCaptures:
          '1': {name: punctuation.definition.parameters.end.aidl}
        # parameter_list
        contentName: meta.annotation.parameters.aidl
        patterns:
          - include: '#comments'
          - name: punctuation.separator.parameter.method.aidl
            match: ','
          - name: keyword.operator.assignment.aidl
            match: '='
          - include: '#const_expr'
          - name: variable.parameter.aidl
            match: '[_a-zA-Z][_a-zA-Z0-9]*'
      # Annotation without parameters
      - match: (@)([_a-zA-Z][_a-zA-Z0-9]*)
        name: storage.type.annotation.aidl
        captures:
          '1': {name: punctuation.definition.annotation.aidl}
          '2': {name: meta.annotation.identifier.aidl}
  comments:
    patterns:
      - include: '#multi_line_comment'
      - match: (//).*
        name: comment.line.double-slash.aidl
        captures:
          '1': {name: punctuation.definition.comment.aidl}
  decls:
    patterns:
      - include: '#annotation'
      # interface_decl
      - name: meta.interface.aidl
        begin: '(?:(oneway)\s+)?(interface)\s+([_a-zA-Z][_a-zA-Z0-9]*)\s*(\{)'
        beginCaptures:
          '1': {name: storage.modifier.aidl}
          '2': {name: storage.type.interface.aidl}
          '3': {name: entity.name.type.interface.aidl}
          '4': {name: punctuation.section.braces.begin.aidl}
        patterns:
          - include: '#interface_members'
        end: '(\})'
        endCaptures:
          '1': {name: punctuation.section.braces.end.aidl}
      # parcelable_decl
      - name: meta.parcelable.aidl
        begin: '(parcelable)\s+((?:[_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))*)\s*(?:(<)((:?[_a-zA-Z][_a-zA-Z0-9]*)(:?,\s+[_a-zA-Z][_a-zA-Z0-9]*)*)(>)\s*)?(\{)'
        beginCaptures:
          '1': {name: storage.type.parcelable.aidl}
          '2': {name: entity.name.type.parcelable.aidl}
          '3': {name: punctuation.definition.generic.begin.aidl}
          '4': {name: entity.name.other.aidl}
          '5': {name: punctuation.definition.generic.end.aidl}
          '6': {name: punctuation.section.braces.begin.aidl}
        patterns:
          - include: '#parcelable_members'
        end: '(\})'
        endCaptures:
          '1': {name: punctuation.section.braces.end.aidl}
      - name: meta.parcelable.aidl
        match: '(parcelable)\s+((?:[_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))*)\s*(?:(<)((:?[_a-zA-Z][_a-zA-Z0-9]*)(:?,\s+[_a-zA-Z][_a-zA-Z0-9]*)*)(>)\s*)?(;)'
        captures:
          '1': {name: storage.type.parcelable.aidl}
          '2': {name: entity.name.type.parcelable.aidl}
          '3': {name: punctuation.definition.generic.begin.aidl}
          '4': {name: entity.name.other.aidl}
          '5': {name: punctuation.definition.generic.end.aidl}
          '6': {name: punctuation.terminator.aidl}
      - name: meta.parcelable.aidl
        match: '(parcelable)\s+((?:[_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))*)\s*(cpp_header)\s*(")([^\"]*)(")(;)'
        captures:
          '1': {name: storage.type.parcelable.aidl}
          '2': {name: entity.name.type.parcelable.aidl}
          '3': {name: keyword.aidl}
          '4': {name: punctuation.definition.string.begin.aidl}
          '5': {name: string.quoted.double.aidl}
          '6': {name: punctuation.definition.string.end.aidl}
          '7': {name: punctuation.terminator.aidl}
      # enum_decl
      - name: meta.enum.aidl
        begin: '(enum)\s+([_a-zA-Z][_a-zA-Z0-9]*)\s*(\{)'
        beginCaptures:
          '1': {name: storage.type.enum.aidl}
          '2': {name: entity.name.type.enum.aidl}
          '3': {name: punctuation.section.braces.begin.aidl}
        end: '(\})'
        endCaptures:
          '1': {name: punctuation.section.braces.end.aidl}
        patterns:
          - include: '#enum_decl_body'
      # union_decl
      - name: meta.union.aidl
        begin: '(union)\s+((?:[_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))*)\s*(?:(<)((:?[_a-zA-Z][_a-zA-Z0-9]*)(:?,\s+[_a-zA-Z][_a-zA-Z0-9]*)*)(>)\s*)?(\{)'
        beginCaptures:
          '1': {name: storage.type.union.aidl}
          '2': {name: entity.name.type.union.aidl}
          '3': {name: punctuation.definition.generic.begin.aidl}
          '4': {name: entity.name.other.aidl}
          '5': {name: punctuation.definition.generic.end.aidl}
          '6': {name: punctuation.section.braces.begin.aidl}
        end: '(\})'
        endCaptures:
          '1': {name: punctuation.section.braces.end.aidl}
        patterns:
          - include: '#parcelable_members'
  type:
    patterns:
      - include: '#annotation'
      - match: \b(void|boolean|byte|char|int|long|float|double)\b
        name: storage.type.aidl
      - match: \b(CharSequence|FileDescriptor|IBinder|List|Map|ParcelableHolder|ParcelFileDescriptor|String)\b
        name: support.class.aidl
      - match: '\[\]'
        name: punctuation.aidl
      - name: meta.generic.aidl
        begin: (\<)
        beginCaptures:
          '1': {name: punctuation.definition.generic.begin.aidl}
        end: (\>)
        endCaptures:
          '1': {name: punctuation.definition.generic.end.aidl}
        patterns:
          - include: '#type'
  import:
    patterns:
      - begin: (import)
        beginCaptures:
          '1': {name: keyword.aidl}
        patterns:
          - match: '(([_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))*)'
            name: entity.name.type.aidl
        end: (;)
        endCaptures:
          '1': {name: punctuation.terminator.aidl}
  interface_members:
    patterns:
      - include: '#comments'
      - include: '#constant_decl'
      - include: '#method_decl'
  parcelable_members:
    patterns:
      - include: '#comments'
      - include: '#constant_decl'
      - include: '#variable_decl'
  enum_decl_body:
    patterns:
      - include: '#comments'
      - name: keyword.operator.assignment.aidl
        match: =
      - include: '#const_expr'
      - name: variable.other.aidl
        match: '[_a-zA-Z][_a-zA-Z0-9]*'
  constant_decl:
    patterns:
      - name: meta.constant.aidl
        begin: (const)
        beginCaptures:
          '1': {name: storage.type.constant.aidl}
        patterns:
          - name: keyword.operator.assignment.aidl
            match: =
          - include: '#comments'
          - include: '#type'
          - include: '#const_expr'
          - name: entity.name.constant.aidl
            match: '[_a-zA-Z][_a-zA-Z0-9]*'
        end: (;)
        endCaptures:
          '1': {name: punctuation.terminator.aidl}
  variable_decl:
    patterns:
      - name: keyword.operator.assignment.aidl
        match: =
      - include: '#type'
      - include: '#const_expr'
      - name: variable.other.aidl
        match: '[_a-zA-Z][_a-zA-Z0-9]*'
      - name: punctuation.terminator.aidl
        match: ;
  method_decl:
    patterns:
      - include: '#annotation'
      - include: '#type'
      - name: storage.modifier.aidl
        match: oneway
      - name: entity.name.function.aidl
        match: '[_a-zA-Z][_a-zA-Z0-9]*'
      - name: keyword.operator.assignment.aidl
        match: =
      - name: punctuation.terminator.aidl
        match: ;
      - name: meta.function.parameters.aidl
        begin: (\()
        beginCaptures:
          '1': {name: punctuation.definition.parameters.begin.aidl}
        end: (\))
        endCaptures:
          '1': {name: punctuation.definition.parameters.end.aidl}
        # arg_list
        patterns:
          - name: punctuation.separator.parameter.method.aidl
            match: ','
          - name: storage.modifier.aidl
            match: \b(in|out|inout)\b
          - include: '#type'
          - name: variable.parameter.aidl
            match: '[_a-zA-Z][_a-zA-Z0-9]*'
  const_expr:
    patterns:
      - include: '#numeric'
      - match: ('.')
        name: constant.character.aidl
      - match: '(")([^\"]*)(")'
        name: meta.string.aidl
        captures:
          '1': {name: punctuation.definition.string.begin.aidl}
          '2': {name: string.quoted.double.aidl}
          '3': {name: punctuation.definition.string.end.aidl}
      - match: (true|false)
        name: constant.language.aidl
      - name: keyword.operator.logical.aidl
        match: ([!<>]|&&|\|\||<=|>=|==|!=)
      - name: keyword.operator.bitwise.aidl
        match: ([&|~\^]|<<|>>)
      - name: keyword.operator.arithmetic.aidl
        match: ([+*/%\-])
      - name: meta.braces.aidl
        begin: (\{})
        beginCaptures:
          '1': {name: punctuation.section.braces.begin.aidl}
        end: (\})
        endCaptures:
          '1': {name: punctuation.section.braces.end.aidl}
        patterns:
          - name: punctuation.separator.aidl
            match: ','
          - include: '#const_expr'
  multi_line_comment:
    patterns:
      - begin: (/\*\*)
        beginCaptures:
          '1': {name: punctuation.definition.comment.aidl}
        name: comment.block.documentation.aidl
        end: (\*/)
        endCaptures:
          '1': {name: punctuation.definition.comment.aidl}
      - begin: (/\*)
        beginCaptures:
          '1': {name: punctuation.definition.comment.aidl}
        name: comment.block.aidl
        end: (\*/)
        endCaptures:
          '1': {name: punctuation.definition.comment.aidl}
  multi_line_comment__1:
    patterns: []
  multi_line_comment__2:
    patterns: []
  numeric:
    patterns:
      - match: '(0[x\x{007c}X][0-9a-fA-F]+[lL]?)'
        name: constant.numeric.hex.aidl
      - match: >-
          ([0-9]*\.[0-9]+([eE][-\x{002b}]?[0-9]+)?f?|[0-9]*\.?[0-9]+([eE][-\x{002b}]?[0-9]+)?f)
        name: constant.numeric.float.aidl
      - match: '([0-9]+[lL]?)'
        name: constant.numeric.decimal.aidl
  package:
    patterns:
      - begin: (package)
        beginCaptures:
          '1': {name: keyword.aidl}
        patterns:
          - match: '(([_a-zA-Z][_a-zA-Z0-9]*)(?:\.([_a-zA-Z][_a-zA-Z0-9]*))+)'
            name: entity.name.namespace.aidl
        end: (;)
        endCaptures:
          '1': {name: punctuation.terminator.aidl}
